// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  role      UserRole @default(RESIDENT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones
  resident     Resident?
  payments     Payment[]
  documents    Document[]
  notifications Notification[]

  @@map("users")
}

model Resident {
  id          String   @id @default(cuid())
  userId      String   @unique
  houseNumber String   @unique
  phone       String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relaciones
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  payments    Payment[]
  documents   Document[]

  @@map("residents")
}

model Payment {
  id                    String        @id @default(cuid())
  residentId            String
  type                  PaymentType
  amount                Float
  dueDate               DateTime
  paidDate              DateTime?
  status                PaymentStatus @default(PENDING)
  description           String?
  stripePaymentIntentId String?
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt

  // Relaciones
  resident    Resident      @relation(fields: [residentId], references: [id], onDelete: Cascade)
  userId      String
  user        User          @relation(fields: [userId], references: [id])

  @@map("payments")
}

model Document {
  id          String       @id @default(cuid())
  residentId  String
  type        DocumentType
  title       String
  content     String
  filePath    String?
  sentDate    DateTime     @default(now())
  isRead      Boolean      @default(false)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Relaciones
  resident    Resident     @relation(fields: [residentId], references: [id], onDelete: Cascade)
  userId      String
  user        User         @relation(fields: [userId], references: [id])

  @@map("documents")
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  title     String
  message   String
  type      NotificationType
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relaciones
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

enum UserRole {
  ADMIN
  RESIDENT
}

enum PaymentType {
  MAINTENANCE
  WATER
  GATE
}

enum PaymentStatus {
  PENDING
  PAID
  OVERDUE
  CANCELLED
}

enum DocumentType {
  INVOICE
  RECEIPT
  NOTICE
  STATEMENT
}

enum NotificationType {
  PAYMENT_DUE
  PAYMENT_RECEIVED
  DOCUMENT_SENT
  GENERAL
} 